-------------------------------- Zad 1 ---------------------------------------
DROP TABLE ciastko;

CREATE TABLE ciastko (
  id_ciastko   NUMBER(10) NOT NULL, nazwa        VARCHAR2(20), cena         NUMBER(10, 2)
);

DROP SEQUENCE seq_ciastko;

CREATE SEQUENCE seq_ciastko INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_ciastko_insert BEFORE
  INSERT ON ciastko
  FOR EACH ROW
BEGIN
  SELECT seq_ciastko.NEXTVAL INTO
    :new.id_ciastko
  FROM dual;

END;
/

INSERT INTO ciastko (nazwa, cena) VALUES (
  'Ciastko1', 1.20
);

INSERT INTO ciastko (nazwa, cena) VALUES (
  'Ciastko2', 2.20
);

INSERT INTO ciastko (nazwa, cena) VALUES (
  'Ciastko3', 3.20
);

COMMIT;

SELECT * FROM ciastko;
-------------------------------- Zad 2 ---------------------------------------
DROP TABLE dane;

CREATE TABLE dane (
  id_dane    NUMBER(10),
  imie       VARCHAR2(15),
  nazwisko   VARCHAR2(30),
  pesel      CHAR(11),
  data_ur    DATE,
  plec       CHAR(1)
);

DROP SEQUENCE seq_dane;

CREATE SEQUENCE seq_dane INCREMENT BY 1;

SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER trg_dane_insert BEFORE
  INSERT ON dane
  FOR EACH ROW
DECLARE
  v_year    CHAR(2);
  v_month   CHAR(2);
  v_day     CHAR(2);
BEGIN
  -- autoinkrementacja
  :new.id_dane := seq_dane.nextval;

  -- parse pesel to date
  v_year := substr(:new.pesel, 1, 2);
  v_month := substr(:new.pesel, 3, 2);
  v_day := substr(:new.pesel, 5, 2);
--  dbms_output.put_line(v_year || '-' || v_month || '-' || v_day);
  :new.data_ur := TO_DATE(v_year || '-' || v_month || '-' || v_day, 'yy-mm-dd');

  -- determine sex

  IF
    MOD(to_number(substr(:new.pesel, 10, 1) ), 2) = 0
  THEN
    :new.plec := 'K';
  ELSE
    :new.plec := 'M';
  END IF;

END;
/

INSERT INTO dane (
  imie,
  nazwisko,
  pesel
) VALUES (
  'Jan',
  'Kowalski',
  '7505250353'
);

SELECT * FROM dane;
-------------------------------- Zad 3 ---------------------------------------
DROP TABLE lista;

CREATE TABLE lista (
  id_slowo   INT,
  slowo      VARCHAR2(20)
);

INSERT INTO lista (
  id_slowo,
  slowo
) VALUES (
  1,
  'red'
);

INSERT INTO lista (
  id_slowo,
  slowo
) VALUES (
  2,
  'blue'
);

INSERT INTO lista (
  id_slowo,
  slowo
) VALUES (
  3,
  'green'
);

COMMIT;

CREATE OR REPLACE TRIGGER trg_lista BEFORE
  UPDATE OR DELETE ON lista
  FOR EACH ROW
BEGIN
  raise_application_error(-20002, 'Dane z tabeli LISTA nie moga byc usuniete ani zmodyfikowane', true);
END;
/

DELETE FROM lista;

UPDATE lista
  SET
    slowo = 'blank'
WHERE 1 = 1;
-------------------------------- Zad 4 ---------------------------------------
DROP TABLE imiona;

CREATE TABLE imiona (
  id     INT,
  imie   VARCHAR2(20)
);

DROP TABLE imiona_historia;

CREATE TABLE imiona_historia (
  id            INT,
  imie          VARCHAR2(20),
  data_zmiany   DATE,
  zmiana        CHAR(1)
);

DROP SEQUENCE seq_imiona_historia;

CREATE SEQUENCE seq_imiona_historia INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_imiona_insert BEFORE
  DELETE OR UPDATE ON imiona
  FOR EACH ROW
BEGIN
  IF
    updating
  THEN
    INSERT INTO imiona_historia VALUES (
      seq_imiona_historia.NEXTVAL,
      :new.imie,
      SYSDATE,
      'U'
    );

  END IF;

  IF
    deleting
  THEN
    INSERT INTO imiona_historia VALUES (
      seq_imiona_historia.NEXTVAL,
      :new.imie,
      SYSDATE,
      'D'
    );

  END IF;

END;
/

INSERT INTO imiona VALUES (
  1,
  'Maciej'
);

COMMIT;

UPDATE imiona
  SET
    imie = 'Maciek'
WHERE id = 1;

COMMIT;

DELETE FROM imiona WHERE id = 1;

COMMIT;

SELECT * FROM imiona_historia;
